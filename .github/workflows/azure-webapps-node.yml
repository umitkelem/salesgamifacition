on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { motion } from "framer-motion";
import { Trophy, Star, Activity, ShoppingCart, MessageSquare, Users, Lock } from "lucide-react";

const SalesGamification = () => {
  const [points, setPoints] = useState(1200);
  const [level, setLevel] = useState("Orta");
  const [goal, setGoal] = useState(5000);
  const [cart, setCart] = useState([]);
  const [users, setUsers] = useState([{ name: "Admin", role: "admin" }]);
  const [newUser, setNewUser] = useState("");
  const [password, setPassword] = useState("temporary123");
  
  const handleSale = () => {
    const newPoints = points + 200;
    setPoints(newPoints);
    if (newPoints >= goal) {
      setLevel("İleri");
    }
  };

  const handlePurchase = (cost) => {
    if (points >= cost) {
      setPoints(points - cost);
      setCart([...cart, { item: "Ödül", status: "Teslimat Bekliyor" }]);
    }
  };

  const handleUserCreate = () => {
    if (newUser) {
      setUsers([...users, { name: newUser, role: "user", password: "temporary123" }]);
      setNewUser("");
    }
  };

  return (
    <div className="p-6 grid gap-4">
      <motion.h1 className="text-2xl font-bold" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
        Satış Oyunlaştırma Paneli
      </motion.h1>

      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <Trophy size={32} className="text-yellow-500" />
            <div>
              <p className="text-lg font-semibold">Mevcut Puan: {points}</p>
              <Progress value={(points / goal) * 100} className="mt-2" />
              <p className="text-sm text-gray-500">Seviye: {level}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <Star size={32} className="text-blue-500" />
            <p className="text-lg font-semibold">Günlük Hedef: 5 Satış</p>
          </div>
        </CardContent>
      </Card>

      <Button onClick={handleSale} className="bg-green-500 hover:bg-green-600">
        <Activity className="mr-2" /> Satış Yap ve Puan Kazan
      </Button>
      
      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <ShoppingCart size={32} className="text-red-500" />
            <Button onClick={() => handlePurchase(500)} className="bg-blue-500 hover:bg-blue-600">
              500 Puan ile Ödül Al
            </Button>
          </div>
          <p className="mt-2 text-sm text-gray-500">Ödül Durumu: {cart.length > 0 ? cart[0].status : "Henüz ödül alınmadı"}</p>
        </CardContent>
      </Card>

      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <Users size={32} className="text-purple-500" />
            <input
              type="text"
              placeholder="Yeni Kullanıcı Adı"
              value={newUser}
              onChange={(e) => setNewUser(e.target.value)}
              className="border p-2 rounded"
            />
            <Button onClick={handleUserCreate} className="bg-indigo-500 hover:bg-indigo-600">
              Kullanıcı Ekle
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <Lock size={32} className="text-gray-500" />
            <p className="text-lg font-semibold">Geçici Şifre: {password}</p>
          </div>
        </CardContent>
      </Card>

      <Card className="p-4">
        <CardContent>
          <div className="flex items-center gap-4">
            <MessageSquare size={32} className="text-gray-500" />
            <p className="text-lg font-semibold">Sohbet Alanı (Yakında)</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SalesGamification;
